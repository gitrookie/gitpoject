Configure Git
	git config --global user.name "gaurav sood"
	git config --global user.email "gaurav3184@gmail.com"
	
Files to version control in current folder
	git add .      Commnet: it will add all the files to the staging are (modified and untracked files)
	git add <filename>  commment: it will add the specified file. Files will go to staging area. 
	git rm --cached <filename>  comment: files will be removed from staging area
    git checkout -- <file>
        -- To discard changes in file in working directory (if the changes are not staged yet.*)
	git commit -m "Initial Commit" comment: files will be commited to local repository
	git log  comment: Status of the file
	git status comment:
	Edit the readme file
	git add
	git commit -m "Changed readme"
	git diff (Shows the difference between commited file and modified file (not yet staged)
	git diff --cached (Shows the difference between commited file and staged file)
	git log --oneline  (remove extra details)
	git commit -a -m ""  commit and stage in single command
	git status -s   comment: what has been modified shorthand (remove extra details)
	git reset --soft HEAD^
	     -- suppose we committed something to repository and later we realized that we dont want that changes
	        Above comman will revert the changes in local repository and that changes will be moved to saging area
		Local copy will still have that changes too.

	git reset --hard HEAD^
	    -- this command will discard any changes in local repository and copy too. 

	git reset HEAD <file>..." to unstage (git status will show again the file in red color from green)

    git branch
        -- list all the branches present in the repository. Highlights current branch we are in.

    git checkout <branch_name>
        -- To switch between branches.

    git branch <branch_name>
        -- Creates a branch named iss53. When branching its better to have things clean.
    
    git checkout -b <branch_name>
        -- Creates a brach named <branch_name> and switches to it.

    git merge <branch_name>
        -- Merges <branch_name> with master

    git branch -d <branch_name>
        -- After the branch <branch_name> has been merged with master it can be deleted using above command


Settings for GitHub
	 git remote add origin https://github.com/gitrookie/gitpoject.git
	     -- gitrookie is username
	     -- gitproject is name of project

	 git push origin master
	     -- push contents of master branch to repository at GitHub

     git push origin <branch_name>
         -- push contents of <branch_name> to repository at GitHub

	 git clone https://github.com/gitrookie/gitpoject.git 
	     -- copy the whole repository from GitHub

     git push origin --delete <branch_name>
         -- Delte the branch from github which has been deleted from the local repository.
